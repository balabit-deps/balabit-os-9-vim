[Ubuntu note: removed changes made to version.c because they were not needed
 to fix the vulnerability. Modifications were made to test_substitute.vim
 since some tests available in vim 9.0.1532 were still not implemented in this
 version of the code. Plus, the test was altered such that it will only be
 executed in 64 bit architectures since it would hang in 32 bit architectures,
 causing builds to fail (changes were made to the test and not to the value of
 MAXCOL due to upstream not providing any type of update that would imply that
 their original patch does not cover 32 bit architectures as of the date of
 application of this patch).
 -- Camila Camargo de Matos <camila.camargodematos@canonical.com>]

Origin: backport, https://github.com/vim/vim/commit/ab9a2d884b3a4abe319606ea95a5a6d6b01cd73a

From ab9a2d884b3a4abe319606ea95a5a6d6b01cd73a Mon Sep 17 00:00:00 2001
From: Bram Moolenaar <Bram@vim.org>
Date: Tue, 9 May 2023 21:15:30 +0100
Subject: [PATCH] patch 9.0.1532: crash when expanding "~" in substitute causes
 very long text

Problem:    Crash when expanding "~" in substitute causes very long text.
Solution:   Limit the text length to MAXCOL.
---
 src/regexp.c                    | 30 +++++++++++++++++++-----------
 src/testdir/test_substitute.vim | 14 ++++++++++++++
 src/version.c                   |  2 ++
 3 files changed, 35 insertions(+), 11 deletions(-)

Index: vim-8.2.3995/src/regexp.c
===================================================================
--- vim-8.2.3995.orig/src/regexp.c
+++ vim-8.2.3995/src/regexp.c
@@ -1752,10 +1752,7 @@ do_Lower(int *d, int c)
 regtilde(char_u *source, int magic)
 {
     char_u	*newsub = source;
-    char_u	*tmpsub;
     char_u	*p;
-    int		len;
-    int		prevlen;
 
     for (p = newsub; *p; ++p)
     {
@@ -1764,24 +1761,35 @@ regtilde(char_u *source, int magic)
 	    if (reg_prev_sub != NULL)
 	    {
 		// length = len(newsub) - 1 + len(prev_sub) + 1
-		prevlen = (int)STRLEN(reg_prev_sub);
-		tmpsub = alloc(STRLEN(newsub) + prevlen);
+		// Avoid making the text longer than MAXCOL, it will cause
+		// trouble at some point.
+		size_t	prevsublen = STRLEN(reg_prev_sub);
+		size_t  newsublen = STRLEN(newsub);
+		if (prevsublen > MAXCOL || newsublen > MAXCOL
+					    || newsublen + prevsublen > MAXCOL)
+		{
+		    emsg(_(e_resulting_text_too_long));
+		    break;
+		}
+
+		char_u *tmpsub = alloc(newsublen + prevsublen);
 		if (tmpsub != NULL)
 		{
 		    // copy prefix
-		    len = (int)(p - newsub);	// not including ~
-		    mch_memmove(tmpsub, newsub, (size_t)len);
+		    size_t prefixlen = p - newsub;	// not including ~
+		    mch_memmove(tmpsub, newsub, prefixlen);
 		    // interpret tilde
-		    mch_memmove(tmpsub + len, reg_prev_sub, (size_t)prevlen);
+		    mch_memmove(tmpsub + prefixlen, reg_prev_sub,
+							       prevsublen);
 		    // copy postfix
 		    if (!magic)
 			++p;			// back off backslash
-		    STRCPY(tmpsub + len + prevlen, p + 1);
+		    STRCPY(tmpsub + prefixlen + prevsublen, p + 1);
 
-		    if (newsub != source)	// already allocated newsub
+		    if (newsub != source)	// allocated newsub before
 			vim_free(newsub);
 		    newsub = tmpsub;
-		    p = newsub + len + prevlen;
+		    p = newsub + prefixlen + prevsublen;
 		}
 	    }
 	    else if (magic)
Index: vim-8.2.3995/src/testdir/test_substitute.vim
===================================================================
--- vim-8.2.3995.orig/src/testdir/test_substitute.vim
+++ vim-8.2.3995/src/testdir/test_substitute.vim
@@ -1047,4 +1047,22 @@ func Test_sub_edit_scriptfile()
   bwipe!
 endfunc
 
+" Check handling expanding "~" resulting in extremely long text.
+func Test_substitute_tilde_too_long()
+  if v:sizeoflong < 8
+    throw 'Skipped: only works with 64 bit long ints'
+  endif
+
+  enew!
+
+  s/.*/ixxx
+  s//~~~~~~~~~AAAAAAA@(
+
+  " Either fails with "out of memory" or "text too long".
+  " This can take a long time.
+  call assert_fails('sil! norm &&&&&&&&&', ['E1240:\|E342:'])
+
+  bwipe!
+endfunc
+
 " vim: shiftwidth=2 sts=2 expandtab
