From 9198c1f2b1ddecde22af918541e0de2a32f0f45a Mon Sep 17 00:00:00 2001
From: Christian Brabandt <cb@256bit.org>
Date: Thu, 26 Oct 2023 21:29:32 +0200
Subject: [PATCH] patch 9.0.2068: [security] overflow in :history

Problem:  [security] overflow in :history
Solution: Check that value fits into int

The get_list_range() function, used to parse numbers for the :history
and :clist command internally uses long variables to store the numbers.
However function arguments are integer pointers, which can then
overflow.

Check that the return value from the vim_str2nr() function is not larger
than INT_MAX and if yes, bail out with an error. I guess nobody uses a
cmdline/clist history that needs so many entries... (famous last words).

It is only a moderate vulnerability, so impact should be low.

Github Advisory:
https://github.com/vim/vim/security/advisories/GHSA-q22m-h7m2-9mgm

Signed-off-by: Christian Brabandt <cb@256bit.org>
---
 src/cmdhist.c                |  5 ++++-
 src/errors.h                 |  2 ++
 src/ex_getln.c               | 10 +++++++++-
 src/testdir/test_history.vim |  8 ++++++++
 src/version.c                |  2 ++
 5 files changed, 25 insertions(+), 2 deletions(-)

--- vim-8.2.3995.orig/src/cmdhist.c
+++ vim-8.2.3995/src/cmdhist.c
@@ -736,7 +736,10 @@ ex_history(exarg_T *eap)
 	end = arg;
     if (!get_list_range(&end, &hisidx1, &hisidx2) || *end != NUL)
     {
-	semsg(_(e_trailing_characters_str), end);
+	if (*end != NUL)
+	    semsg(_(e_trailing_characters_str), end);
+	else
+	    semsg(_(e_val_too_large), arg);
 	return;
     }
 
--- vim-8.2.3995.orig/src/errors.h
+++ vim-8.2.3995/src/errors.h
@@ -2160,3 +2160,5 @@ EXTERN char e_illegal_character_in_word[
 #endif
 EXTERN char e_window_unexpectedly_close_while_searching_for_tags[]
 	INIT(= N_("E1299: Window unexpectedly closed while searching for tags"));
+EXTERN char e_val_too_large[]
+	INIT(= N_("E1510: Value too large: %s"));
\ No newline at end of file
--- vim-8.2.3995.orig/src/ex_getln.c
+++ vim-8.2.3995/src/ex_getln.c
@@ -4202,6 +4202,10 @@ get_list_range(char_u **str, int *num1,
     {
 	vim_str2nr(*str, NULL, &len, 0, &num, NULL, 0, FALSE);
 	*str += len;
+	// overflow
+	if (num > INT_MAX)
+	    return FAIL;
+
 	*num1 = (int)num;
 	first = TRUE;
     }
@@ -4212,8 +4216,12 @@ get_list_range(char_u **str, int *num1,
 	vim_str2nr(*str, NULL, &len, 0, &num, NULL, 0, FALSE);
 	if (len > 0)
 	{
-	    *num2 = (int)num;
 	    *str = skipwhite(*str + len);
+	    // overflow
+	    if (num > INT_MAX)
+		return FAIL;
+
+	    *num2 = (int)num;
 	}
 	else if (!first)		// no number given at all
 	    return FAIL;
--- vim-8.2.3995.orig/src/testdir/test_history.vim
+++ vim-8.2.3995/src/testdir/test_history.vim
@@ -249,4 +249,12 @@ func Test_history_crypt_key()
   set key& bs& ts&
 endfunc
 
+" The following used to overflow and causing an use-after-free
+func Test_history_max_val()
+
+  set history=10
+  call assert_fails(':history 2147483648', 'E1510:')
+  set history&
+endfunc
+
 " vim: shiftwidth=2 sts=2 expandtab
--- vim-8.2.3995.orig/src/version.c
+++ vim-8.2.3995/src/version.c
@@ -5079,6 +5079,8 @@ static int included_patches[] =
 /**/
     1849,
 /**/
+    2068,
+/**/
     5072,
 /**/
     5023,
